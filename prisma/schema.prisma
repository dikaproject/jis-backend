generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  password       String
  role           Role           @default(USER)
  profile        Profile?
  pet            Pet?
  aichat        AIChat[]
  dailyQuests    DailyQuest[]
  streaks        Streak[]
  moods          Mood[]
  diaries        Diary[]
  questionnaire  Questionnaire?
  whatsappNumber String?
  imageAnalysisUsages ImageAnalysisUsage[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  avatar    String?  @default("default-avatar.png")
  bio       String?  @db.Text
  age       Int?
  gender    String?
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id            Int              @id @default(autoincrement())
  name          String          @default("SolvanaPet")
  stage         PetStage        @default(EGG)
  userId        Int             @unique
  user          User            @relation(fields: [userId], references: [id])
  achievements  PetAchievement[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model PetAchievement {
  id         Int            @id @default(autoincrement())
  type       AchievementType
  unlockedAt DateTime       @default(now())
  petId      Int
  pet        Pet           @relation(fields: [petId], references: [id])
}

model QuestTemplate {
  id           Int             @id @default(autoincrement())
  type         QuestType
  title        String
  description  String          @db.Text
  duration     Int            
  url          String?        
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model DailyQuest {
  id          Int          @id @default(autoincrement())
  userId      Int
  type        QuestType
  title       String
  description String       @db.Text
  target      Int
  url         String? 
  status      QuestStatus  @default(PENDING)
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])    
}

model Streak {
  id          Int      @id @default(autoincrement())
  count       Int      @default(0)
  maxCount    Int      @default(0)
  lastCheckIn DateTime
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mood {
  id        Int      @id @default(autoincrement())
  type      MoodType 
  note      String?  @db.Text
  imageUrl  String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  diary     Diary?
  createdAt DateTime @default(now())
}

model Diary {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  moodId     Int      @unique
  mood       Mood     @relation(fields: [moodId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  aiAnalysis String?  @db.Text
  createdAt  DateTime @default(now())
}

model Questionnaire {
  id              Int      @id @default(autoincrement())
  answers         Json
  mentalScore     Int? // AI-generated mental health score
  recommendations Json? // AI-generated recommendations
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
}

model Resource {
  id          Int          @id @default(autoincrement())
  type        ResourceType
  title       String
  description String       @db.Text
  url         String
  duration    Int 
  category    String
  tags        String?
  thumbnail   String?
  createdAt   DateTime     @default(now())
}

model WhatsappLog {
  id          Int      @id @default(autoincrement())
  phoneNumber String
  messageType String 
  content     String   @db.Text
  status      String 
  createdAt   DateTime @default(now())
}

model AIChat {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    role      String   
    content   String   @db.Text
    language  String
    createdAt DateTime @default(now())
}

model ImageAnalysisUsage {
    id        Int      @id @default(autoincrement())
    userId    Int
    timestamp DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])

    @@index([userId, timestamp])
}

enum Role {
  USER
  ADMIN
}

enum QuestType {
  BREATHING
  MUSIC
  VIDEO
}

enum QuestStatus {
  PENDING
  COMPLETED
}

enum ResourceType {
  MUSIC
  VIDEO
  GAME
}

enum AchievementType {
  STREAK_10_DAYS
  STREAK_30_DAYS
  STREAK_100_DAYS
  STREAK_200_DAYS
}

enum PetStage {
  EGG
  BABY
  TEEN
  ADULT
}

enum MoodType {
  HAPPY   
  NEUTRAL  
  SAD      
  ANGRY    
}

enum QuestDifficulty {
  EASY 
  MEDIUM 
  HARD 
}
